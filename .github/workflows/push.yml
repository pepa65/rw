name: Rust

on:
  push:
    branches: [main, dev]
    tags: ["[0-9]+.[0-9]+.[0-9]+"]
  pull_request:
    branches: [main, dev]

jobs:
  formatting:
    name: Cargo Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
          toolchain: nightly
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache ~/.cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-clippy-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-clippy-cargo-build-target
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy
      - name: cargo clippy
        run: cargo clippy --target=x86_64-unknown-linux-gnu

  dist:
    name: "Dist (${{ matrix.os }})"
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - Linux
          - Windows
          - macOS
        include:
          - os: Linux
            image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
          #- os: Windows
          #  image: windows-latest
          #  target: x86_64-pc-windows-gnu
          #  ext: ".exe"
          #- os: macOS
          #  image: macos-latest
          #  target: aarch64-apple-darwin
          #  ext: ""
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - name: Cache ~/.cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-test-dotcargo-stable
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-test-build-target-stable
      - name: Build
        run: cargo build -p rw --target ${{ matrix.target }} --bins --release
      # Always zipped...
      #- name: Tar binaries
      #  run: |
      #    pushd "target/${{ matrix.target }}/release/"
      #    tar -cvzf "rw-${{ matrix.target }}.tgz" "wormhole-rs${{ matrix.ext }}"
      #    popd
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rw_${{ matrix.target }}
          path: target/${{ matrix.target }}/release/rw
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - dist
    steps:
      - uses: actions/checkout@v4
      - name: Get Cargo Version
        id: query-version
        run: |
          cargo metadata --no-deps --format-version=1 \
          | jq -r 'first(.packages[]).version' \
          | xargs -0 printf "version=%s" \
          >> "$GITHUB_OUTPUT"
      - name: Check Tag
        id: check-tag
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${{ steps.query-version.outputs.version }}"; then
            echo "tag=1" >> "$GITHUB_OUTPUT"
          else
            echo "tag=0" >> "$GITHUB_OUTPUT"
          fi
      - name: Extract Changelog for ${{ steps.query-version.outputs.version }}
        id: query-changelog
        uses: release-flow/keep-a-changelog-action@v3
        with:
          command: query
          version: ${{ steps.query-version.outputs.version }}
      - uses: actions/download-artifact@v4
        with:
          path: "./dist"
          pattern: "rw-*"
      - name: Update Release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/main') }}
        with:
          name: "Version ${{ steps.query-version.outputs.version }}"
          #body: ${{ steps.query-changelog.outputs.release-notes }}
          files: "./dist/**/rw-*"
          fail_on_unmatched_files: false
          prerelease: false #${{ contains(steps.query-version.outputs.version, '-') }}
          draft: false #${{ steps.check-tag.outputs.tag == 0 && !startsWith(github.ref, 'refs/tags/') }}
          make_latest: true #${{ !contains(steps.query-version.outputs.version, '-') && startsWith(github.ref, 'refs/tags/') }}
